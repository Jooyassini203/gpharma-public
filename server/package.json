{
  "name": "server",
  "version": "1.0.0",
  "description": "",
  "type": "module",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\"  &&  exit 1",
    "gen::model": " echo import ^{ DataTypes ^} from 'sequelize'^; import db from '../../config/Database.js'^;  const %npm_config_name% = db.define^( '%npm_config_name%',   ^{   nom_%npm_config_name%: ^{ type: DataTypes.CHAR^(255^), allowNull: false, unique: true ^} ,   quantite: ^{ type: DataTypes.DOUBLE^(10^), allowNull: false,  ^} ,   data_%npm_config_name%: ^{ type: DataTypes.DATE, allowNull: false,  ^} ,  status: ^{  type: DataTypes.BOOLEAN,  defaultValue: '1',  ^} ,   ^} ,    ^{  paranoid: true,  freezeTableName: true,  ^}   ^)^;  export default %npm_config_name%^; > database/models/%npm_config_name%.model.js | code database/models/%npm_config_name%.model.js && cd database/migrations && (echo import %npm_config_name% from \"../models/%npm_config_name%.model.js\";) > temp.txt & type Migration.js >> temp.txt & move /y temp.txt Migration.js >nul && cd ../../",
    "gen::ctrl": " echo import %npm_config_name% from '../database/models/%npm_config_name%.model.js';const getAll = async (req, res) => {    try {    const response = await %npm_config_name%.findAll();    res.json(response);  } catch (error) {    console.log(error.message);  }};const getSpecific = async (req, res) => {  try {    const response = await %npm_config_name%.findOne({ where: {        id: req.params.id,      },    });    res.json(response);  } catch (error) {    console.log(error.message);  }};const createOne = (req, res) => {};const updateOne = async (req, res) => {};const deleteOne = async (req, res) => {        const user = %npm_config_name%.findOne({        where: {      id: req.params.id,    },  });  if (!user) return res.status(404).json({ message: '%npm_config_name% introvable!' });  try {    await %npm_config_name%.destroy({      where: {        id: req.params.id,      },    });    return res.status(200).json({ message: '%npm_config_name% supprimé avec succès!' });  } catch (error) {    console.log(error);  }};export { getAll, getSpecific, createOne, updateOne, deleteOne }; import %npm_config_name% from '../database/models/%npm_config_name%.model.js';const getAll = async (req, res) => {    try {    const response = await %npm_config_name%.findAll();    res.json(response);  } catch (error) {    console.log(error.message);  }};const getSpecific = async (req, res) => {  try {    const response = await %npm_config_name%.findOne({ where: {        id: req.params.id,      },    });    res.json(response);  } catch (error) {    console.log(error.message);  }};const createOne = (req, res) => {};const updateOne = async (req, res) => {};const deleteOne = async (req, res) => {        const user = %npm_config_name%.findOne({        where: {      id: req.params.id,    },  });  if (!user) return res.status(404).json({ message: '%npm_config_name% introvable!' });  try {    await %npm_config_name%.destroy({      where: {        id: req.params.id,      },    });    return res.status(200).json({ message: '%npm_config_name% supprimé avec succès!' });  } catch (error) {    console.log(error);  }};export { getAll, getSpecific, createOne, updateOne, deleteOne }; > controllers/%npm_config_name%.controller.js | code controllers/%npm_config_name%.controller.js",
    "start": "nodemon -r dotenv/config server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "bcrypt": "^5.1.0",
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.0.2",
    "express": "^4.18.1",
    "express-fileupload": "^1.4.0",
    "mariadb": "^3.0.1",
    "mysql2": "^2.3.3",
    "nodemon": "^2.0.20",
    "react-confirm-alert": "^3.0.6",
    "sequelize": "^6.23.1"
  },
  "devDependencies": {
    "@faker-js/faker": "^7.5.0"
  }
}
